user  nginx;
worker_processes  1;

pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  off;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    ##
    # SSL Settings
    ##

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
    ssl_prefer_server_ciphers on;

    gzip  on;

    # Port 80 redirect
    server {
      listen 80;
      server_name _;
      location / {
        return 301 https://$host$request_uri;
      }
      # Rule for legitimate ACME Challenge requests (like /.well-known/acme-challenge/xxxxxxxxx)
      location ^~ /.well-known/acme-challenge/ {
      # No HTTP authentication
        allow all;

        # Set correct content type. According to this:
        # https://community.letsencrypt.org/t/using-the-webroot-domain-verification-method/1445/29
        # Current specification requires "text/plain" or no content header at all.
        # It seems that "text/plain" is a safe option.
        default_type "text/plain";

        # Change document root: this path will be given to certbot as the 
        # `-w` param of the webroot plugin.
        root /sites/letsencrypt/webroot;
      }
      # Hide /acme-challenge subdirectory and return 404 on all requests.
      # It is somewhat more secure than letting Nginx return 403.
      # Ending slash is important!
      location = /.well-known/acme-challenge/ {
        return 404;
      }

      access_log off;
    }

    ##
    # Catch all
    ##
    server {
      listen			443 ssl;
      server_name		_;
      ssl_certificate		/sites/certs/letsencrypt/live/staging.masterypath.io/cert.pem;
      ssl_certificate_key	/sites/certs/letsencrypt/live/staging.masterypath.io/privkey.pem;
      ssl_protocols		TLSv1 TLSv1.1 TLSv1.2;
      ssl_ciphers		HIGH:!aNULL:!MD5;
      return 404;
    }

    include /etc/nginx/80/*;
    include /etc/nginx/443/*;
}
